import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { saveNewUser } from '../api/api';
import { _getUsers } from '../api/_DATA';

const initialState = {
  status: 'idle',
  error: null,
  isLoadingUsers: false,
  isSavingNewUser: false,
  users: {},
};

export const fetchUsers = createAsyncThunk('users/_getUsers', async () => {
  const response = await _getUsers();
  return response;
});

export const saveNewUserAsync = createAsyncThunk(
  'users/saveNewUserAsync',
  async ({ id, password, name }) => {
    const response = await saveNewUser({ id, password, name });
    return response;
  }
);

export const usersSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {
    setLoadingState: (state, action) => {
      state.loading = action.payload;
    },
    getUser: (state, action) => {
      return state.users[action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.status = 'loading';
        state.isLoadingUsers = true;
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // console.log('Current users (state.users): ', state?.users);
        // console.log('New users (action.payload): ', action.payload);
        state.users = { ...state.users, ...action.payload };
        state.isLoadingUsers = false;
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error;
        state.isLoadingUsers = false;
      })
      .addCase(saveNewUserAsync.pending, (state) => {
        state.status = 'loading';
        state.isSavingNewUser = true;
      })
      .addCase(saveNewUserAsync.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.isSavingNewUser = false;
        // console.log('Action on saving user succesfully: ', action);
      })
      .addCase(saveNewUserAsync.rejected, (state, action) => {
        state.status = 'failed';
        state.isSavingNewUser = false;
        state.error = action.error;
        // console.log('action.error: ', action);
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUsers = (state) => {
  return state.users.users;
};

export const selectUser = (state) => {
  const tempUserId = state.user?.id || null;
  if (typeof tempUserId === 'string') {
    // console.log('redux/users/selectUser - tempUserId: ', tempUserId);
    // console.log('redux/users/selectUser - state?.users?.users: ', state?.users?.users);
    return state?.users?.users[tempUserId];
  }
  return null;
};

export const selectTotalUsers = (state) => {
  return Object.keys(state.users.users).length;
};

export const selectUsersStatus = (state) => state.users.status;
export const selectUsersError = (state) => state.users.error;
export const selectIsLoadingUsers = (state) => state.users.isLoadingUsers;
export const selectIsSavingNewUser = (state) => state.users.isSavingNewUser;

// Action creators are generated for each case reducer function
export const { getUser, setLoadingState } = usersSlice.actions;

usersSlice.thunks = {
  fetchUsers,
  saveNewUserAsync,
};

export default usersSlice.reducer;

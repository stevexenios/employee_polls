import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { _getQuestions, _saveQuestionAnswer, _saveQuestion } from '../api/_DATA';

const initialState = {
  status: 'idle',
  answeredQuestions: [],
  unansweredQuestions: [],
  savingQuestionStatus: 'idle',
  error: 'none',
};

export const fetchQuestions = createAsyncThunk(
  'questions/_getQuestions',
  async () => {
    const response = await _getQuestions();
    return response;
  }
);

export const saveAnsweredQuestion = createAsyncThunk(
  'questions/_saveQuestionAnswer',
  async ({ authedUser, qid, answer }) => {
    const response = await _saveQuestionAnswer({ authedUser, qid, answer });
    // console.log('On question answered, response should be true: ', response);
  }
);

export const saveNewQuestion = createAsyncThunk(
  'questions/_saveQuestion',
  async ({ optionOneText, optionTwoText, author }) => {
    // console.log('redux/questions - saveNewQuestion: ', author);
    const response = await _saveQuestion({ optionOneText, optionTwoText, author });
    // console.log('redux/questions - saveNewQuestion: ', response);
    return response;
  }
);

export const questionsSlice = createSlice({
  name: 'questions',
  initialState,
  reducers: {
    addAnsweredQuestions: (state, action) => {
      if (state.answeredQuestions.every((q) => q.id !== action.payload)) {
        state.answeredQuestions.push({
          ...state.questions[action.payload],
        });
      }
    },
    addUnansweredQuestions: (state, action) => {
      if (state.unansweredQuestions.every((q) => q.id !== action.payload)) {
        state.unansweredQuestions.push({
          ...state.questions[action.payload],
        });
      }
    },
    removeUnansweredQuestions: (state, action) => {
      state.unansweredQuestions = state.unansweredQuestions.filter(
        (q) => q.id === action.payload
      );
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchQuestions.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchQuestions.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.questions = action.payload;
        // console.log('redux/questions/fetchQuestions - state: ', state.questions);
      })
      .addCase(fetchQuestions.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error;
      })
      .addCase(saveAnsweredQuestion.pending, (state) => {
        state.savingQuestionStatus = 'saving answered question';
      })
      .addCase(saveAnsweredQuestion.fulfilled, (state) => {
        state.savingQuestionStatus = 'successfully saved answered question';
      })
      .addCase(saveAnsweredQuestion.rejected, (state, action) => {
        state.savingQuestionStatus = 'failed saving answered question';
        state.error = action.error;
      })
      .addCase(saveNewQuestion.pending, (state) => {
        state.savingNewQuestionStatus = 'saving ndew question';
      })
      .addCase(saveNewQuestion.fulfilled, (state) => {
        state.savingNewQuestionStatus = 'successfully saved new question';
      })
      .addCase(saveNewQuestion.rejected, (state, action) => {
        state.savingNewQuestionStatus = 'failed saving new question';
        state.error = action.error;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectQuestions = (state) => {
  return state.questions.questions;
};

export const selectAnsweredQuestions = (state) => {
  return state.questions.answeredQuestions;
};

export const selectUnansweredQuestions = (state) => {
  return state.questions.unansweredQuestions;
};

export const selectError = (state) => {
  return state.questions.error;
};

// Action creators are generated for each case reducer function
export const {
  addAnsweredQuestions,
  addUnansweredQuestions,
  removeUnansweredQuestions,
} = questionsSlice.actions;

questionsSlice.thunks = {
  fetchQuestions,
  saveAnsweredQuestion,
  saveNewQuestion,
};

export default questionsSlice.reducer;

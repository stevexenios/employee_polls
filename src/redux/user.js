import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getUsers, authenticateUserCredentials } from '../api/api';

const initialState = {
  id: null,
  name: null,
  status: null,
  token: null,
  error: null,
  isLoadingUser: false,
};

export const authenticateUser = createAsyncThunk(
  'users/authenticateUser',
  async ({ userId, password }, { getState }) => {
    // const { users } = getState().users;
    const users = await getUsers();
    // console.log('Current users: ', users);
    const response = await authenticateUserCredentials(
      { userId, password },
      users
    );
    return response;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUserId: (state, action) => {
      state.id = action.payload;
    },
    setUserToken: (state, action) => {
      state.token = action.payload;
    },
    setUserLoadingState: (state, action) => {
      state.isLoadingUser = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(authenticateUser.pending, (state) => {
        state.status = 'loading';
        state.isLoadingUser = true;
        state.error = null;
      })
      .addCase(authenticateUser.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.isLoadingUser = false;
        state.token = action.payload.token;
        state.error = null;
      })
      .addCase(authenticateUser.rejected, (state, action) => {
        state.status = 'failed';
        state.isLoadingUser = false;
        state.error = action.error;
      });
  },
});

export const selectUserId = (state) => state.user.id;
export const selectUserToken = (state) => state.user.token;
export const selectUserStatus = (state) => state.user.status;
export const selectUserError = (state) => state.user.error;
export const selectIsLoadingUser = (state) => state.user.isLoadingUser;

// Action creators are generated for each case reducer function
export const { setUserId, setUserLoadingState, setUserToken } =
  userSlice.actions;

userSlice.thunks = {
  authenticateUser,
};

export default userSlice.reducer;
